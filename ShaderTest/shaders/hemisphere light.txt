/* vertex shader */

uniform vec3 ecLightPosition; //light position in the view coordinate space.
uniform vec3 SkyColor;
uniform vec3 GroundColor;

uniform mat4 MVMatrix;
uniform mat4 MVPMatrix;
uniform mat3 NormalMatrix;
attribute vec4 MCVertex;
attribute vec3 MCNormal;

varying vec3 vDiffuseColor;

void main() {
    vec3 ecPosition = vec3(MVMatrix * MCVertex);
    vec3 tnorm = normalize(NormalMatrix * MCNormal);
    vec3 lightVec = normalize(ecLightPosition - ecPosition);
    float costheta = dot(tnorm, lightVec);
    float a = costheta * 0.5 + 0.5;
    vDiffuseColor = mix(GroundColor, SkyColor, a);
    gl_Position = MVPMatrix * MCVertex;
}

/* fragment shader */

precision mediump float;

vec3 materialColor = vec3(1, 1, 1);

varying vec3 vDiffuseColor;

void main(){
    gl_FragColor = vec4(materialColor * vDiffuseColor, 1.0);
}


/* play function */
function play(){
    //get the attribute/uniform indices in the shaders.
    var uMVPMatrixIdx = gl.getUniformLocation(program, "MVPMatrix");
    var uNormalMatrixIdx = gl.getUniformLocation(program, "NormalMatrix");
    var uMVMatrixIdx = gl.getUniformLocation(program, "MVMatrix");

    //feed all kinds of matrices
    var modelMatrix = mat4.create();
    var viewMatrix = mat4.create();
    var projectionMatrix = mat4.create();

    var VPMatrix = mat4.create(); //intermediate result used to calculate MVP
    var MVPMatrix = mat4.create();
    var MVMatrix = mat4.create();
    var normalMatrix = mat3.create();

    //projection matrix, view matrix, and VP matrix.
    mat4.perspective(projectionMatrix, Math.PI * 0.1, gl.viewportWidth / gl.viewportHeight, 1, 2000.0);
    mat4.lookAt(viewMatrix, vec3.fromValues(5, 20, 40), vec3.fromValues(0,0,0), vec3.fromValues(0,1,0));
    mat4.multiply(VPMatrix, projectionMatrix, viewMatrix);

    //hemisphere light
    var skyColorIdx = gl.getUniformLocation(program, "SkyColor");
    var groundColorIdx = gl.getUniformLocation(program, "GroundColor");
    gl.uniform3fv(skyColorIdx, vec3.fromValues(1, 1, 1));
    gl.uniform3fv(groundColorIdx, vec3.fromValues(0.1, 0.1, 0.1));

    var ecLightPositionIdx = gl.getUniformLocation(program, "ecLightPosition");
    var wcLightPosition = vec3.fromValues(0, 10, 0);
    var ecLightPosition = vec3.create();
    vec3.transformMat4(ecLightPosition, wcLightPosition, viewMatrix);
    gl.uniform3fv(ecLightPositionIdx, ecLightPosition);

    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    //draw those 9 cuboids
    drawSingleCuboid(0, 0); //正中心的
    drawSingleCuboid(4, 0);
    drawSingleCuboid(-4, 0);

    drawSingleCuboid(0, 4);
    drawSingleCuboid(4, 4);
    drawSingleCuboid(-4, 4);

    drawSingleCuboid(0, -4);
    drawSingleCuboid(4, -4);
    drawSingleCuboid(-4, -4);


    function drawSingleCuboid(x, z){
        mat4.identity(modelMatrix);
        mat4.translate(modelMatrix, modelMatrix, vec3.fromValues(x, 0, z));
        //model matrix and MVP matrix...
        mat4.multiply(MVPMatrix, VPMatrix, modelMatrix);
        gl.uniformMatrix4fv(uMVPMatrixIdx, false, MVPMatrix);

        //normal matrix and MV matrix.
        mat4.multiply(MVMatrix, viewMatrix, modelMatrix);
        mat3.normalFromMat4(normalMatrix, MVMatrix);
        gl.uniformMatrix4fv(uMVMatrixIdx, false, MVMatrix);
        gl.uniformMatrix3fv(uNormalMatrixIdx, false, normalMatrix);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
        gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_BYTE, 0);
    }
}
